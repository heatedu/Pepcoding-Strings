#include <algorithm>
#include <bits/stdc++.h>
#include <unordered_map>
#include <unordered_set>
using namespace std;
#define mod (int) 998244353
#define MOD (int) 1e9+7
// Big two primes
#define X 1001100011100001111ll
#define all(a) a.begin(),a.end()
#define for0(i, n) for (int i = 0; i < n; i++)
#define for1(i, n) for (int i = 1; i <= n; i++)
#define loop(i,a,b) for (int i = a; i < b; i++)
#define bloop(i,a,b) for (int i = a ; i>=b;i--)
#define t int t; cin >> t; while (t--)
#define int long long
#define ll long long
#define float long double
#define pb emplace_back
#define fio ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)
#define in(x) scanf("%d", &x)
#define rr return 0
#define prec(n) fixed<<setprecision(n)
#define maxpq priority_queue<int>
#define minpq priority_queue<int, vector<int>, greater<int> >
#define inf (int)(1e18)
#define ini(a, i) memset(a, i, sizeof(a))
#define vi vector<int>
#define fi first
#define se second
#define endl "\n"
#define ii pair<int, int>
#define vii vector<ii>
#define sz(s) s.size()
#define bits(n) __builtin_popcount(n)
#define mx *max_element
#define mn *min_element
const int MAXN = (int)((1e5) + 100);
int gcd(int a,int b){   if(b==0)return a;else return gcd(b,a%b);}
int max(int a, int b) {if (a > b) return a; else return b;}
int min(int a, int b) {if (a < b) return a; else return b;}
void pr(int x) {cout << x;}
void prl(int x) {cout << x << endl;}
const int N =  (int)(1 * 1e6 + 10);
using namespace std;
string ss;
void palindromic(string s,int l,int r,unordered_map<string,bool>&m)
{
    while(l>=0 and r<=s.size()-1)
    {
        if(s[l]==s[r])
        {
            if(l!=r)
            ss=s[l]+ss+s[r];
            else
            ss=s[l];
            if(m[ss]!=true)
            m[ss]=true;
          
        }
        else
        break;
          l--;
            r++;
    }
}
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);cout.tie(NULL);
    t
    {
        string s;
        cin>>s;
        ll n=s.length();
        unordered_map<string,bool>m;
        for0(i,n)
        {
            ss=s[i];
            if(m[ss]!=true)
            m[ss]=true;
        }
        for0(i,n)
        {
            ss="";
            palindromic(s,i,i,m);
            ss="";
            palindromic(s,i,i+1,m);
        }
        prl(m.size());
    }
}
