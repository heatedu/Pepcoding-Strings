vector RabinKarp(string t,strin s)
{
     const int p = 31; 
    const int m = 1e9 + 9;
    int T=t.size();
    int S=s.size();
    vector<long long> p_pow(max(S, T)); 
    p_pow[0] = 1; 
    for (int i = 1; i < (int)p_pow.size(); i++) 
        p_pow[i] = (p_pow[i-1] * p) % m;
    vector<long long>h(T+1,0);
    for(int i=0;i<T;i++)
        h[i+1]=(h[i]+(t[i]-'a'+1)*p_pow[i])%m;
    int hs=0;
    for(int i=0;i<S;i++)
        hs+=((s[i]-'a'+1)*p_pow[i])%m;
    vector<int>occurences;
    for(int i=0;i<T-S+1;i++)
    {
       long long curr_h=(h[S+i]-h[i]+m)%m;
        if(curr_h==(hs*p_pow[i]%m))
            occurences.push_back(i);
        return occurences;
    }
}
