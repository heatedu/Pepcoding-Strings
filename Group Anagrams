class Solution {
public:
    //This method is little lengthy
    // vector<vector<string>> groupAnagrams(vector<string>& s) {
    //     unordered_map<string,vector<int>>m;
    //     int j=0;
    //     for(string i:s)
    //     {
    //         sort(i.begin(),i.end());
    //         m[i].push_back(j++);
    //     }
    //     vector<vector<string>>ans;
    //     for(auto it:m)
    //     {
    //        vector<string>res;
    //         for(auto i:it.second)
    //             res.push_back(s[i]);
    //         ans.push_back(res);
    //     }
    //     return ans;
    // }
    
    
    //M2:ALTHOUGH APPROACH IS SAME
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
	unordered_map<string, vector<string>> count;
	int i = 0;
	for (auto s : strs)
	{
		sort(s.begin(), s.end());
		count[s].push_back(strs[i++]);
	}
	vector<vector<string>> res;
	for (auto n : count){
		//sort(n.second.begin(), n.second.end());(OPTIONAL BCZ WE CAN RETURN IN ANY ORDER)
		res.push_back(n.second);
	}
	return res;
}
};
